{"version":3,"sources":["../src/datasource.js"],"names":["_","GenericDatasource","instanceSettings","$q","backendSrv","templateSrv","type","url","name","q","withCredentials","headers","basicAuth","length","options","query","from","range","valueOf","to","interval_ms","intervalMs","max_data_points","maxDataPoints","timeseries","targets","filter","t","hide","node","time_field","data_field","map","id","when","data","doRequest","method","then","response","status","target","ts","datapoints","times","entries","i","values","sort","_v1","t1","_v2","t2","message","title","replace","annotation","annotationQuery","datasource","enable","iconColor","rangeRaw","result","interpolated","node_prefix","mapToTextValue","field_prefix","text","d","value","datasourceRequest"],"mappings":"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","file":"datasource.js","sourcesContent":["import _ from \"lodash\";\n\nexport class GenericDatasource {\n\n  constructor(instanceSettings, $q, backendSrv, templateSrv) {\n    this.type = instanceSettings.type;\n    this.url = instanceSettings.url;\n    this.name = instanceSettings.name;\n    this.q = $q;\n    this.backendSrv = backendSrv;\n    this.templateSrv = templateSrv;\n    this.withCredentials = instanceSettings.withCredentials;\n    this.headers = {'Content-Type': 'application/json'};\n    if (typeof instanceSettings.basicAuth === 'string' && instanceSettings.basicAuth.length > 0) {\n      this.headers['Authorization'] = instanceSettings.basicAuth;\n    }\n  }\n\n  query(options) {\n    var query = {\n      from: options.range.from.valueOf(),\n      to: options.range.to.valueOf(),\n      interval_ms: options.intervalMs,\n      max_data_points: options.maxDataPoints,\n      timeseries: options.targets.filter(t =>\n        !t.hide && t.node && t.time_field && t.data_field\n      ).map(t => {\n        return {\n          id: t.node + '(' + t.time_field + 'â†’' + t.data_field + ')',\n          node: t.node,\n          time_field: t.time_field,\n          data_field: t.data_field,\n        };\n      })\n    };\n\n    if (query.timeseries.length <= 0) {\n      return this.q.when({data: []});\n    }\n\n    return this.doRequest({\n      url: this.url + '/timeseries',\n      data: query,\n      method: 'POST'\n    }).then(response => {\n      if (response.status === 200) {\n        let data = response.data.map(ts => {\n          return {\n            target: ts.id,\n            datapoints: [...ts.times.entries()]\n                        .map(([i, t]) => [ts.values[i], t])\n                        .sort(([_v1,t1], [_v2,t2]) => t1-t2)\n          };\n        });\n        return { data: data };\n      }\n    });\n  }\n\n  testDatasource() {\n    return this.doRequest({\n      url: this.url + '/grafana',\n      method: 'GET',\n    }).then(response => {\n      if (response.status === 200) {\n        return { status: \"success\", message: \"Data source is working\", title: \"Success\" };\n      }\n    });\n  }\n\n  annotationQuery(options) {\n    var query = this.templateSrv.replace(options.annotation.query, {}, 'glob');\n    var annotationQuery = {\n      range: options.range,\n      annotation: {\n        name: options.annotation.name,\n        datasource: options.annotation.datasource,\n        enable: options.annotation.enable,\n        iconColor: options.annotation.iconColor,\n        query: query\n      },\n      rangeRaw: options.rangeRaw\n    };\n\n    return this.doRequest({\n      url: this.url + '/grafana/annotations',\n      method: 'POST',\n      data: annotationQuery\n    }).then(result => {\n      return result.data;\n    });\n  }\n\n  completeNodes(query) {\n    var interpolated = {\n        node_prefix: this.templateSrv.replace(query, null, 'regex')\n    };\n\n    return this.doRequest({\n      url: this.url + '/complete/nodes',\n      data: interpolated,\n      method: 'POST',\n    }).then(this.mapToTextValue);\n  }\n\n  completeFields(node, query) {\n    var interpolated = {\n        node: node,\n        field_prefix: this.templateSrv.replace(query, null, 'regex')\n    };\n\n    return this.doRequest({\n      url: this.url + '/complete/fields',\n      data: interpolated,\n      method: 'POST',\n    }).then(this.mapToTextValue);\n  }\n\n  mapToTextValue(result) {\n    return result.data.sort().map(d => ({ text: d, value: d }));\n  }\n\n  doRequest(options) {\n    options.withCredentials = this.withCredentials;\n    options.headers = this.headers;\n\n    return this.backendSrv.datasourceRequest(options);\n  }\n}\n"]}