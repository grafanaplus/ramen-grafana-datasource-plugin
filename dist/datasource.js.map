{"version":3,"sources":["../src/datasource.js"],"names":["_","GenericDatasource","instanceSettings","$q","backendSrv","templateSrv","type","url","name","q","withCredentials","headers","basicAuth","length","options","query","from","range","valueOf","to","interval_ms","intervalMs","max_data_points","maxDataPoints","timeseries","targets","filter","t","hide","node","data_field","select_y","map","id","consolidation","spec","Predefined","select_x","NewTempNode","where","when","data","doRequest","method","then","response","status","target","ts","datapoints","times","entries","i","values","sort","_v1","t1","_v2","t2","message","title","replace","annotation","annotationQuery","datasource","enable","iconColor","rangeRaw","result","interpolated","node_prefix","only_exporting","mapToTextValue","field_prefix","text","d","value","test","datasourceRequest"],"mappings":"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","file":"datasource.js","sourcesContent":["import _ from \"lodash\";\n\nexport class GenericDatasource {\n\n  constructor(instanceSettings, $q, backendSrv, templateSrv) {\n    this.type = instanceSettings.type;\n    this.url = instanceSettings.url;\n    this.name = instanceSettings.name;\n    this.q = $q;\n    this.backendSrv = backendSrv;\n    this.templateSrv = templateSrv;\n    this.withCredentials = instanceSettings.withCredentials;\n    this.headers = {'Content-Type': 'application/json'};\n    if (typeof instanceSettings.basicAuth === 'string' && instanceSettings.basicAuth.length > 0) {\n      this.headers['Authorization'] = instanceSettings.basicAuth;\n    }\n  }\n\n  /* We must perform everything in a single query:\n   * - request all the predefined timeseries\n   * - create (or update) a temporary, anonymous node with the given operation\n   * - add its exported time series into the result.\n   *\n   * It is probably easier to just send everything we have to ramen and leave\n   * it to it to construct the node etc. rather than try to do this from this\n   * grafana plugin.\n   * Bigger problem is: when do we delete those nodes? If they are cheap to create\n   * and have no (or not much) history then we can probably delete them after a few\n   * minutes we haven't been requested their data.\n   * Maybe we could have a longer timeout for group-bys for instance, but anything\n   * more persistent must fall into the 'predefined' category.\n   *\n   * So, ramen will first have to name the node, for instance according to a hash\n   * of the operation+from (at least we want to avoid creating a new node each time\n   * a client ask for the timeserie, esp since it involves compiling!)\n   * Then it create the layer and the node, with a 'temporary' flag, and record\n   * in the export table each time a timeserie is requested.\n   * A distinct thread can then yank the unused temporary nodes and empty layers.\n   */\n  query(options) {\n    var query = {\n      from: options.range.from.valueOf(),\n      to: options.range.to.valueOf(),\n      interval_ms: options.intervalMs,\n      max_data_points: options.maxDataPoints,\n      timeseries: options.targets.filter(t =>\n        !t.hide && (\n          t.type == 'predefined' && t.node && t.data_field ||\n          t.type == 'new' && t.select_y && t.from\n        )\n      ).map(t => {\n        if (t.type == 'predefined') {\n          return {\n            // Id is used for the legend\n            id: t.node + '(' + t.data_field + ')',\n            consolidation: t.consolidation,\n            spec: {\n              Predefined: {\n                node: t.node,\n                data_field: t.data_field,\n              }\n            },\n          };\n        } else {\n          return {\n            id: t.select_x + ',' + t.select_y + ' FROM ' + t.from,\n            consolidation: t.consolidation,\n            spec: {\n              NewTempNode: {\n                select_x: t.select_x,\n                select_y: t.select_y,\n                from: t.from,\n                where: t.where || '',\n              }\n            },\n          };\n        }\n      })\n    };\n\n    if (query.timeseries.length <= 0) {\n      return this.q.when({data: []});\n    }\n\n    return this.doRequest({\n      url: 'timeseries',\n      data: query,\n      method: 'POST'\n    }).then(response => {\n      if (response.status === 200) {\n        let data = response.data.map(ts => {\n          return {\n            target: ts.id,\n            datapoints: [...ts.times.entries()]\n                        .map(([i, t]) => [ts.values[i], t])\n                        .sort(([_v1,t1], [_v2,t2]) => t1-t2)\n          };\n        });\n        return { data: data };\n      }\n    });\n  }\n\n  testDatasource() {\n    return this.doRequest({\n      url: 'grafana',\n      method: 'GET',\n    }).then(response => {\n      if (response.status === 200) {\n        return { status: \"success\", message: \"Data source is working\", title: \"Success\" };\n      }\n    });\n  }\n\n  annotationQuery(options) {\n    var query = this.templateSrv.replace(options.annotation.query, {}, 'glob');\n    var annotationQuery = {\n      range: options.range,\n      annotation: {\n        name: options.annotation.name,\n        datasource: options.annotation.datasource,\n        enable: options.annotation.enable,\n        iconColor: options.annotation.iconColor,\n        query: query\n      },\n      rangeRaw: options.rangeRaw\n    };\n\n    return this.doRequest({\n      url: 'grafana/annotations',\n      method: 'POST',\n      data: annotationQuery\n    }).then(result => {\n      return result.data;\n    });\n  }\n\n  completeNodes(query) {\n    var interpolated = {\n        node_prefix: this.templateSrv.replace(query, null, 'regex'),\n        only_exporting: true\n    };\n\n    return this.doRequest({\n      url: 'complete/nodes',\n      data: interpolated,\n      method: 'POST',\n    }).then(this.mapToTextValue);\n  }\n\n  completeFields(node, query) {\n    var interpolated = {\n        node: node,\n        field_prefix: this.templateSrv.replace(query, null, 'regex')\n    };\n\n    return this.doRequest({\n      url: 'complete/fields',\n      data: interpolated,\n      method: 'POST',\n    }).then(this.mapToTextValue);\n  }\n\n  mapToTextValue(result) {\n    return result.data.sort().map(d => ({ text: d, value: d }));\n  }\n\n  doRequest(options) {\n    options.withCredentials = this.withCredentials;\n    options.headers = this.headers;\n\n    options.url = /\\/$/.test(this.url) ? this.url + options.url : this.url + '/' + options.url;\n\n    return this.backendSrv.datasourceRequest(options);\n  }\n}\n"]}